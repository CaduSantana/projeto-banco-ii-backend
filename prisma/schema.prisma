// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  uuid_pessoa                  String                         @id @default(uuid())
  nome                         String                         @db.VarChar(45)
  sobrenome                    String                         @db.VarChar(45)
  cpf                          String                         @unique @db.VarChar(11)
  email                        String                         @unique @db.VarChar(320)
  senha                        String                         @db.VarChar(40)
  is_funcionario               Boolean                        @db.Boolean
  is_admin                     Boolean                        @db.Boolean
  Endereco                     Endereco[]
  // Pessoa_reside_Endereco       Pessoa_reside_Endereco[]
  // Funcionario_executa_Descarte Funcionario_executa_Descarte[]
}

model Endereco {
  uuid_endereco          String                   @id @default(uuid())
  rua                    String                   @db.VarChar(45)
  numero                 String                   @db.VarChar(45)
  bairro                 String                   @db.VarChar(45)
  cidade                 String                   @db.VarChar(45)
  estado                 String                   @db.VarChar(45)
  cep                    String                   @db.VarChar(8)
  complemento            String?                   @db.VarChar(280)
  uuid_pessoa            String
  Pessoa                 Pessoa                   @relation(fields: [uuid_pessoa], references: [uuid_pessoa])
  Municipios             Municipios?              @relation(fields: [municipiosId_municipio], references: [id_municipio])
  municipiosId_municipio Int?
  // Pessoa_reside_Endereco Pessoa_reside_Endereco[]
}

model Municipios {
  id_municipio Int        @id @default(autoincrement())
  nome         String     @db.VarChar(45)
  id_uf        Int        @db.SmallInt
  Endereco     Endereco[]
  Ufs          Ufs?       @relation(fields: [ufsId_uf], references: [id_uf])
  ufsId_uf     Int?
}

model Ufs {
  id_uf      Int          @id @default(autoincrement())
  nome       String       @db.VarChar(60)
  sigla      String       @db.Char(2)
  Municipios Municipios[]
}

model Categorias {
  id_categoria Int        @id @default(autoincrement()) @db.SmallInt
  nome         String     @db.VarChar(45)
  prioridade   Int        @db.SmallInt
  Produtos     Produtos[]
}

model Produtos {
  uuid_produto String     @id @default(uuid())
  nome         String     @db.VarChar(45)
  descricao    String     @db.VarChar(280)
  massa        Float      @db.Real
  id_categoria Int        @db.SmallInt
  categorias   Categorias @relation(fields: [id_categoria], references: [id_categoria])
}

model Veiculos {
  uuid_veiculo                 String                         @id @default(uuid())
  placa                        String                         @db.VarChar(7)
  tipo                         String                         @db.VarChar(45)
  capacidade                   Int                            @db.Integer
  // Funcionario_executa_Descarte Funcionario_executa_Descarte[]
}

model Descartes {
  uuid_descarte                String                         @id @default(uuid())
  solicitado_em                DateTime                       @db.Timestamp(0) // Hã?
  uuid_solicitante             String                         @default(uuid())
  uuid_origem                  String                         @default(uuid())
  uuid_destino                 String                         @default(uuid())
  // Funcionario_executa_Descarte Funcionario_executa_Descarte[]
}

// Desnecessário. Prisma faz isso automaticamente.

// model Pessoa_reside_Endereco {
//   uuid_pessoa   String
//   uuid_endereco String
//   pessoa        Pessoa   @relation(fields: [uuid_pessoa], references: [uuid_pessoa])
//   endereco      Endereco @relation(fields: [uuid_endereco], references: [uuid_endereco])

//   @@id([uuid_pessoa, uuid_endereco])
// }

// model Funcionario_executa_Descarte {
//   uuid_veiculo     String
//   uuid_descarte    String
//   uuid_funcionario String
//   veiculo          Veiculos  @relation(fields: [uuid_veiculo], references: [uuid_veiculo])
//   descarte         Descartes @relation(fields: [uuid_descarte], references: [uuid_descarte])
//   funcionario      Pessoa    @relation(fields: [uuid_funcionario], references: [uuid_pessoa])

//   @@id([uuid_veiculo, uuid_descarte, uuid_funcionario]) // TODO É isso? Ou existe uma entidade Funcionario?
// }
